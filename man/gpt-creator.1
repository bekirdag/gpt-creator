.\" =========================================================================
.\" gpt-creator(1) — CLI for bootstrapping projects with Codex
.\" =========================================================================
.TH gpt-creator 1 "2025-09-23" "gpt-creator" "User Commands"
.SH NAME
gpt-creator \- scaffold and iteratively build full‑stack projects from docs using Codex
.SH SYNOPSIS
.B gpt-creator
[\-h|\-\-help] [\-\-version]
.br
.B gpt-creator create-project
[\-\-template NAME|auto|skip] [\-\-skip-template]
.I /path/to/project
.br
.B gpt-creator bootstrap
[\-\-template NAME|auto|skip] [\-\-skip-template] [\-\-rfp FILE] [\-\-fresh]
.I /path/to/project
.br
.B gpt-creator scan
[\-\-root DIR] [patterns...]
.br
.B gpt-creator normalize
[\-\-root DIR]
.br
.B gpt-creator plan
[\-\-root DIR] [\-\-out FILE]
.br
.B gpt-creator generate
{api|web|admin|db|docker} [\-\-root DIR]
.br
.B gpt-creator db
{provision|import|seed} [\-\-root DIR]
.br
.B gpt-creator run
{up|down|logs|open} [\-\-root DIR]
.br
.B gpt-creator verify
[\-\-root DIR]
.br
.B gpt-creator create-sds
[\-\-project DIR] [\-\-model NAME] [\-\-dry-run] [\-\-force]
.br
.B gpt-creator create-pdr
[\-\-project DIR] [\-\-model NAME] [\-\-dry-run] [\-\-force]
.br
.B gpt-creator create-jira-tasks
[\-\-project DIR] [\-\-model NAME] [\-\-force] [\-\-dry-run]
.br
.B gpt-creator migrate-tasks
[\-\-project DIR] [\-\-force]
.br
.B gpt-creator refine-tasks
[\-\-project DIR] [\-\-story SLUG] [\-\-model NAME] [\-\-dry-run] [\-\-force]
.br
.B gpt-creator create-tasks
[\-\-project DIR] [\-\-jira FILE] [\-\-force]
.br
.B gpt-creator work-on-tasks
[\-\-project DIR] [\-\-story ID|SLUG] [\-\-fresh] [\-\-no-verify] [\-\-keep-artifacts] [\-\-memory-cycle] [\-\-batch-size NUM] [\-\-sleep-between SEC] [\-\-context-lines NUM] [\-\-context-none] [\-\-context-mode MODE] [\-\-context-file-lines NUM] [\-\-context-skip GLOB] [\-\-prompt-compact] [\-\-prompt-expanded] [\-\-context-doc-snippets] [\-\-sample-lines NUM]
.br
.B gpt-creator iterate
[\-\-root DIR] [\-\-jira FILE] (deprecated)
.SH DESCRIPTION
\fBgpt-creator\fR is a global CLI that discovers product documents (PDR/SDS/RFP,
OpenAPI, SQL dumps, Mermaid diagrams, Jira tasks, page samples), normalizes them
into a staging layout, builds a plan, and drives the Codex client to generate a
NestJS + Vue 3 + MySQL system with Docker orchestration.
.PP
The \fBcreate-project\fR command is a one‑shot orchestrator that runs the full
pipeline: \fBscan\fR → \fBnormalize\fR → \fBplan\fR → \fBgenerate\fR → \fBdb\fR → \fBrun\fR → \fBverify\fR.
.SH GLOBAL OPTIONS
.TP
.B \-h, \-\-help
Show help.
.TP
.B \-\-version
Show version.
.TP
.B \-v, \-\-verbose
Verbose output (repeatable).
.SH SUBCOMMANDS
.TP
.B create-project
Run the full pipeline on a target directory. When `--template auto` (default),
the command inspects the staged RFP/PDR and, when possible, clones a matching
project scaffold from \fIproject_templates/\fR before executing the standard
scan → normalize → plan → generate → db → run → verify flow. Use
`--template <name>` to force a specific template or `--skip-template` to start
from an empty folder.
.TP
.B bootstrap
Automate the entire RFP → code loop. The command optionally applies a project
template (same semantics as \fBcreate-project\fR), then runs `create-pdr`,
`create-sds`, `create-jira-tasks`, and the full build pipeline (scan → normalize
→ plan → generate → db → run → verify) sequentially. The result is a generated
stack, staged PDR/SDS, and a populated Jira backlog with a single invocation.
Progress is checkpointed; re-running the command resumes from the last
successful step unless \fB--fresh\fR is supplied to start over. Use
\fB--rfp FILE\fR to stage the source RFP before bootstrapping when one is
available.
.TP
.B scan
Fuzzy discovery of inputs: PDR, SDS, RFP, OpenAPI, SQL dumps, Mermaid (*.mmd),
Jira tasks, and page samples (HTML/CSS).
.TP
.B normalize
Stage and rename discovered files into an internal canonical layout.
.TP
.B plan
Synthesize a build plan from the docs (APIs, entities, routes, tasks).
.TP
.B generate
Codegen in focused scopes: \fBapi\fR | \fBweb\fR | \fBadmin\fR | \fBdb\fR | \fBdocker\fR.
.TP
.B db
Provision MySQL, import schema/dumps, and seed baseline data.
.TP
.B run
Docker Compose wrappers: \fBup\fR, \fBdown\fR, \fBlogs\fR, \fBopen\fR.
.TP
.B verify
Acceptance & NFR checks: routes render, filters work, Lighthouse, AA basics.
.TP
.B create-sds
Derive a System Design Specification from the staged PDR. The command calls Codex
iteratively: first to produce a high-level table of contents ordered from
architecture down to operational detail, then to write each section and
subsection in sequence. Intermediate prompts/outputs live under
\fI.gpt-creator/staging/plan/create-sds/\fR and the assembled SDS is written to
\fI.gpt-creator/staging/plan/sds/sds.md\fR. Supports \fB--model\fR to choose the
Codex model, \fB--dry-run\fR to generate prompts without calling Codex, and
\fB--force\fR to regenerate every stage.
.TP
.B create-pdr
Iteratively draft a Product Requirements Document from the staged RFP. The
command first asks Codex for a table of contents ordered from high-level
strategy down to detailed delivery work, then generates section and subsection
content in subsequent passes. Artifacts are written under
\fI.gpt-creator/staging/plan/create-pdr/\fR with the assembled document at
\fI.gpt-creator/staging/plan/pdr/pdr.md\fR. Supports \fB--model\fR to pick the
Codex model, \fB--dry-run\fR to capture prompts without calling Codex, and
\fB--force\fR to regenerate every stage.
.TP
.B create-jira-tasks
Mine the staged documentation (PDR, SDS, OpenAPI, SQL dumps, UI samples) to generate Jira epics, user stories, and implementation tasks automatically. Outputs are written to \fI.gpt-creator/staging/plan/create-jira-tasks/json/\fR and a consolidated payload is stored in \fI.gpt-creator/staging/plan/tasks/tasks.db\fR. The command is resumable: checkpoint data is stored under \fI.gpt-creator/staging/plan/create-jira-tasks/state.json\fR and reruns continue from the last successful step. Supports \fB--model\fR to pick a Codex model, \fB--force\fR to rebuild from scratch (clears checkpoints), and \fB--dry-run\fR to stage prompts without calling Codex. Follow up with \fBmigrate-tasks\fR and \fBrefine-tasks\fR to refresh the SQLite backlog or enrich tasks in place.
.TP
.B migrate-tasks
Rebuild the \fI.gpt-creator/staging/plan/tasks/tasks.db\fR backlog from the JSON artifacts produced by \fBcreate-jira-tasks\fR. Useful when you need to resync the database without re-running the full Codex pipeline. Pass \fB--force\fR to discard preserved task status metadata during the rebuild.
.TP
.B refine-tasks
Stream tasks from \fI.gpt-creator/staging/plan/tasks/tasks.db\fR, hydrate the story/task JSON, invoke Codex to refine the content against the staged documentation, write refined JSON snapshots to \fIjson/refined\fR, and update the corresponding SQLite rows immediately after each successful response. Supports \fB--story\fR to focus on a single story slug, \fB--model\fR to override the Codex model, \fB--dry-run\fR to generate prompts without calling Codex, and \fB--force\fR to reset stored refinement flags and reprocess every task.
.TP
.B create-tasks
Convert Jira markdown into a project-scoped SQLite backlog at \fI.gpt-creator/staging/plan/tasks/tasks.db\fR, persisting epics, stories, and task metadata (including prior progress) for resumable automation.
.TP
.B task-convert
Deprecated alias of \fBcreate-tasks\fR retained for backwards compatibility.
.TP
.B work-on-tasks
Drive Codex over tasks sourced from the SQLite backlog, apply returned JSON diff/file instructions automatically, and persist task/story status back into the database for precise resume support.
Artifacts (prompt/output pairs) are removed after each successful task to limit memory use unless \fB--keep-artifacts\fR is supplied.
Use \fB--batch-size\fR to pause after a fixed number of tasks and \fB--sleep-between\fR to insert delays between Codex runs when conserving resources.
\fB--context-lines\fR controls how many lines from the shared context appendix are appended to each prompt (default 400) and \fB--context-none\fR omits that appendix entirely for minimal prompts.
\fB--context-mode\fR selects the appendix strategy: \fIdigest\fR (default) summarises staged files into short hashed excerpts, while \fIraw\fR streams the literal tail produced by \fB--context-lines\fR.
\fB--context-file-lines\fR clips each staged document before inclusion, while \fB--context-skip\fR accepts repeatable glob patterns to drop noisy files (for example, \fB--context-skip '*.css'\fR).
\fB--prompt-compact\fR keeps the default compact instruction/schema block, while \fB--prompt-expanded\fR restores the legacy verbose guidance if you need the older behaviour.
\fB--context-doc-snippets\fR resolves known document references/endpoints to staged files and injects compact hashed summaries in place of broad shared-context dumps.
Set \fBGC_CONTEXT_INCLUDE_UI=1\fR when you need the legacy raw UI dumps preserved in the generated context file.
`work-on-tasks` now assumes `.gpt-creator/staging/plan/tasks/tasks.db` already exists; populate it with \fBgpt-creator create-tasks\fR (or `create-jira-tasks` + `migrate-tasks`) before invoking the loop.
\fB--sample-lines\fR (default 0) streams minified sample payload chunks on demand; increase the value when a task needs raw request/response bodies beyond the default digest.
\fB--memory-cycle\fR processes one task per invocation, performs a best-effort memory trim (including Docker cache pruning), and automatically restarts the command so long backlogs stay within bounded RAM.
.TP
.B iterate
Deprecated legacy Jira loop. The command runs with a deprecation warning; prefer \fBcreate-tasks\fR followed by \fBwork-on-tasks\fR.
.SH ENVIRONMENT
.TP
.B OPENAI_API_KEY
API key for Codex / GPT‑5‑high usage.
.TP
.B CODEX_BASE_URL
Override Codex API base (optional).
.TP
.B GPT_CREATOR_CONFIG
Path to config file (default: \fI~/.config/gpt-creator/config.yaml\fR).
.TP
.B DOCKER_HOST, MYSQL_* 
Standard Docker/MySQL variables honored by helpers.
.SH FILES
.I ~/.config/gpt-creator/config.yaml
\- CLI configuration.
.br
.I ~/.cache/gpt-creator/
\- cache and run artifacts.
.SH EXIT STATUS
Zero for success; non‑zero on error.
.SH EXAMPLES
Initialize a project:
.PP
.nf
gpt-creator create-project ~/work/yoga
.fi
.PP
Only (re)generate the API:
.PP
.nf
gpt-creator generate api --root ~/work/yoga
.fi
.SH SEE ALSO
docker(1), docker-compose(1), mysql(1), node(1)
