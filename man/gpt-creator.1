.\" =========================================================================
.\" gpt-creator(1) — CLI for bootstrapping projects with Codex
.\" =========================================================================
.TH gpt-creator 1 "2025-09-23" "gpt-creator" "User Commands"
.SH NAME
gpt-creator \- scaffold and iteratively build full‑stack projects from docs using Codex
.SH SYNOPSIS
.B gpt-creator
[\-h|\-\-help] [\-\-version]
.br
.B gpt-creator create-project
.I /path/to/project
[\-\-non-interactive] [\-\-yes] [\-\-verbose]
.br
.B gpt-creator scan
[\-\-root DIR] [patterns...]
.br
.B gpt-creator normalize
[\-\-root DIR]
.br
.B gpt-creator plan
[\-\-root DIR] [\-\-out FILE]
.br
.B gpt-creator generate
{api|web|admin|db|docker} [\-\-root DIR]
.br
.B gpt-creator db
{provision|import|seed} [\-\-root DIR]
.br
.B gpt-creator run
{up|down|logs|open} [\-\-root DIR]
.br
.B gpt-creator verify
[\-\-root DIR]
.br
.B gpt-creator create-jira-tasks
[\-\-project DIR] [\-\-model NAME] [\-\-force] [\-\-skip-refine] [\-\-dry-run]
.br
.B gpt-creator create-tasks
[\-\-project DIR] [\-\-jira FILE] [\-\-force]
.br
.B gpt-creator work-on-tasks
[\-\-project DIR] [\-\-story ID|SLUG] [\-\-fresh] [\-\-no-verify] [\-\-keep-artifacts] [\-\-memory-cycle] [\-\-batch-size NUM] [\-\-sleep-between SEC]
.br
.B gpt-creator iterate
[\-\-root DIR] [\-\-jira FILE] (deprecated)
.SH DESCRIPTION
\fBgpt-creator\fR is a global CLI that discovers product documents (PDR/SDS/RFP,
OpenAPI, SQL dumps, Mermaid diagrams, Jira tasks, page samples), normalizes them
into a staging layout, builds a plan, and drives the Codex client to generate a
NestJS + Vue 3 + MySQL system with Docker orchestration.
.PP
The \fBcreate-project\fR command is a one‑shot orchestrator that runs the full
pipeline: \fBscan\fR → \fBnormalize\fR → \fBplan\fR → \fBgenerate\fR → \fBdb\fR → \fBrun\fR → \fBverify\fR.
.SH GLOBAL OPTIONS
.TP
.B \-h, \-\-help
Show help.
.TP
.B \-\-version
Show version.
.TP
.B \-v, \-\-verbose
Verbose output (repeatable).
.SH SUBCOMMANDS
.TP
.B create-project
Run the full pipeline on a target directory.
.TP
.B scan
Fuzzy discovery of inputs: PDR, SDS, RFP, OpenAPI, SQL dumps, Mermaid (*.mmd),
Jira tasks, and page samples (HTML/CSS).
.TP
.B normalize
Stage and rename discovered files into an internal canonical layout.
.TP
.B plan
Synthesize a build plan from the docs (APIs, entities, routes, tasks).
.TP
.B generate
Codegen in focused scopes: \fBapi\fR | \fBweb\fR | \fBadmin\fR | \fBdb\fR | \fBdocker\fR.
.TP
.B db
Provision MySQL, import schema/dumps, and seed baseline data.
.TP
.B run
Docker Compose wrappers: \fBup\fR, \fBdown\fR, \fBlogs\fR, \fBopen\fR.
.TP
.B verify
Acceptance & NFR checks: routes render, filters work, Lighthouse, AA basics.
.TP
.B create-jira-tasks
Mine the staged documentation (PDR, SDS, OpenAPI, SQL dumps, UI samples) to generate Jira epics, user stories, and enriched implementation tasks automatically. Results are written directly to \fI.gpt-creator/staging/plan/tasks/tasks.db\fR. Supports \fB--model\fR to pick a Codex model, \fB--force\fR to rebuild from scratch, \fB--skip-refine\fR to skip the enrichment pass, and \fB--dry-run\fR to stage prompts without calling Codex.
.TP
.B create-tasks
Convert Jira markdown into a project-scoped SQLite backlog at \fI.gpt-creator/staging/plan/tasks/tasks.db\fR, persisting epics, stories, and task metadata (including prior progress) for resumable automation.
.TP
.B task-convert
Deprecated alias of \fBcreate-tasks\fR retained for backwards compatibility.
.TP
.B work-on-tasks
Drive Codex over tasks sourced from the SQLite backlog, apply returned JSON diff/file instructions automatically, and persist task/story status back into the database for precise resume support.
Artifacts (prompt/output pairs) are removed after each successful task to limit memory use unless \fB--keep-artifacts\fR is supplied.
Use \fB--batch-size\fR to pause after a fixed number of tasks and \fB--sleep-between\fR to insert delays between Codex runs when conserving resources.
\fB--memory-cycle\fR processes one task per invocation, performs a best-effort memory trim (including Docker cache pruning), and automatically restarts the command so long backlogs stay within bounded RAM.
.TP
.B iterate
Deprecated legacy Jira loop. The command runs with a deprecation warning; prefer \fBcreate-tasks\fR followed by \fBwork-on-tasks\fR.
.SH ENVIRONMENT
.TP
.B OPENAI_API_KEY
API key for Codex / GPT‑5‑high usage.
.TP
.B CODEX_BASE_URL
Override Codex API base (optional).
.TP
.B GPT_CREATOR_CONFIG
Path to config file (default: \fI~/.config/gpt-creator/config.yaml\fR).
.TP
.B DOCKER_HOST, MYSQL_* 
Standard Docker/MySQL variables honored by helpers.
.SH FILES
.I ~/.config/gpt-creator/config.yaml
\- CLI configuration.
.br
.I ~/.cache/gpt-creator/
\- cache and run artifacts.
.SH EXIT STATUS
Zero for success; non‑zero on error.
.SH EXAMPLES
Initialize a project:
.PP
.nf
gpt-creator create-project ~/work/yoga
.fi
.PP
Only (re)generate the API:
.PP
.nf
gpt-creator generate api --root ~/work/yoga
.fi
.SH SEE ALSO
docker(1), docker-compose(1), mysql(1), node(1)
